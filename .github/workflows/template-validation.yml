---
name: Template Validation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

jobs:
  validate-library-template:
    name: Validate Library Template
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['6.0.x', '7.0.x', '8.0.x', '9.0.x']
        framework: ['net6.0', 'net7.0', 'net8.0', 'net9.0', 'netstandard2.1']
        include:
          - dotnet-version: '6.0.x'
            framework: 'net6.0'
          - dotnet-version: '7.0.x' 
            framework: 'net7.0'
          - dotnet-version: '8.0.x'
            framework: 'net8.0'
          - dotnet-version: '9.0.x'
            framework: 'net9.0'
        exclude:
          # .NET 6 can't target newer frameworks
          - dotnet-version: '6.0.x'
            framework: 'net7.0'
          - dotnet-version: '6.0.x'
            framework: 'net8.0'
          - dotnet-version: '6.0.x'
            framework: 'net9.0'
          # .NET 7 can't target newer frameworks
          - dotnet-version: '7.0.x'
            framework: 'net8.0'
          - dotnet-version: '7.0.x'
            framework: 'net9.0'
          # .NET 8 can't target newer frameworks
          - dotnet-version: '8.0.x'
            framework: 'net9.0'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ${{ env.NUGET_PACKAGES }}
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Install library template
        run: |
          # Check .NET version and use appropriate install command
          DOTNET_VERSION=$(dotnet --version)
          if [[ "$DOTNET_VERSION" =~ ^6\. ]]; then
            # .NET 6 uses older template command syntax
            dotnet new --install ./templates/zentient-library-template
          else
            # .NET 7+ uses new syntax
            dotnet new install ./templates/zentient-library-template
          fi

      - name: Verify template installation
        run: dotnet new list zentient-lib

      - name: Create test workspace
        run: mkdir -p test-workspace && cd test-workspace

      - name: Test default configuration
        working-directory: test-workspace
        run: |
          dotnet new zentient-lib -n TestDefault --Framework ${{ matrix.framework }}
          cd TestDefault
          dotnet restore
          dotnet build --configuration Release --no-restore
          dotnet test --configuration Release --no-build --verbosity normal

      - name: Test minimal configuration
        working-directory: test-workspace
        run: |
          dotnet new zentient-lib -n TestMinimal \
            --Framework ${{ matrix.framework }} \
            --EnableSigning false \
            --EnableTesting false \
            --EnableDocumentation false \
            --EnablePerformance false \
            --EnableSecurity false \
            --EnableQuality false
          cd TestMinimal
          dotnet restore
          dotnet build --configuration Release --no-restore

      - name: Test maximal configuration
        working-directory: test-workspace
        run: |
          dotnet new zentient-lib -n TestMaximal \
            --Framework ${{ matrix.framework }} \
            --EnableSigning true \
            --EnableTesting true \
            --EnableDocumentation true \
            --EnablePerformance true \
            --EnableSecurity true \
            --EnableQuality true \
            --LibraryType Validation \
            --Author "Test Author" \
            --Company "Test Company" \
            --Description "Test library for validation"
          cd TestMaximal
          dotnet restore
          dotnet build --configuration Release --no-restore
          dotnet test --configuration Release --no-build --verbosity normal

      - name: Test NuGet packaging
        working-directory: test-workspace/TestMaximal
        run: |
          dotnet pack --configuration Release --no-build --output packages
          ls -la packages/

      - name: Test documentation generation
        working-directory: test-workspace/TestMaximal
        run: |
          # Check that XML documentation was generated
          test -f bin/Release/${{ matrix.framework }}/TestMaximal.xml
          echo "XML documentation generated successfully"

      - name: Cleanup test workspace
        run: rm -rf test-workspace

  validate-project-template:
    name: Validate Project Template
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['8.0.x', '9.0.x']
        configuration:
          - name: 'default'
            args: ''
          - name: 'minimal' 
            args: '--UseDocker false --UseRedisCache false --UseEntityFramework false --IncludeAdvancedPatterns false'
          - name: 'maximal'
            args: '--UseDocker true --UseRedisCache true --UseEntityFramework true --IncludeAdvancedPatterns true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ${{ env.NUGET_PACKAGES }}
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Install project template
        run: dotnet new install ./templates/zentient-project-template

      - name: Verify template installation
        run: dotnet new list zentient

      - name: Create test workspace
        run: mkdir -p test-workspace && cd test-workspace

      - name: Test ${{ matrix.configuration.name }} configuration
        working-directory: test-workspace
        run: |
          dotnet new zentient -n TestProject${{ matrix.configuration.name }} ${{ matrix.configuration.args }}
          cd TestProject${{ matrix.configuration.name }}
          dotnet restore
          dotnet build --configuration Release --no-restore

      - name: Cleanup test workspace
        run: rm -rf test-workspace

  template-security-scan:
    name: Security Scan Templates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install templates
        run: |
          dotnet new install ./templates/zentient-library-template
          dotnet new install ./templates/zentient-project-template

      - name: Create test instances for security scanning
        run: |
          mkdir security-test
          cd security-test
          dotnet new zentient-lib -n SecurityTestLib --EnableSecurity true
          dotnet new zentient -n SecurityTestProject
          cd ..

      - name: Run security scan on generated projects
        working-directory: security-test
        run: |
          # Install security scanning tools
          dotnet tool install --global security-scan
          
          # Scan library template output
          cd SecurityTestLib
          dotnet restore
          # Note: Actual security scanning would happen here
          echo "Security scan would run on SecurityTestLib"
          cd ..
          
          # Scan project template output  
          cd SecurityTestProject
          dotnet restore
          echo "Security scan would run on SecurityTestProject"
          cd ..

      - name: Cleanup
        run: rm -rf security-test

  template-compatibility:
    name: Cross-Platform Compatibility
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        dotnet-version: ['8.0.x']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Install library template
        run: dotnet new install ./templates/zentient-library-template

      - name: Test template on ${{ matrix.os }}
        run: |
          dotnet new zentient-lib -n CrossPlatformTest
          cd CrossPlatformTest
          dotnet restore
          dotnet build --configuration Release --no-restore
          dotnet test --configuration Release --no-build --verbosity normal

      - name: Cleanup
        run: |
          cd ..
          rm -rf CrossPlatformTest

  nuget-metadata-validation:
    name: NuGet Metadata Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install templates
        run: |
          dotnet new install ./templates/zentient-library-template
          dotnet new install ./templates/zentient-project-template

      - name: Make validation script executable
        run: chmod +x ./scripts/validate-nuget-metadata.sh

      - name: Run NuGet metadata validation
        run: ./scripts/validate-nuget-metadata.sh

      - name: Test library template NuGet packaging
        run: |
          mkdir nuget-test
          cd nuget-test
          dotnet new zentient-lib -n TestPackaging \
            --Author "GitHub Actions" \
            --Company "Zentient Templates" \
            --Description "Test library for NuGet packaging validation" \
            --RepositoryUrl "https://github.com/test/repo" \
            --Tags "test;github-actions;validation"
          cd TestPackaging
          dotnet restore
          dotnet build --configuration Release --no-restore
          
          # Validate no template placeholders remain
          echo "🔍 Checking for template placeholders..."
          if grep -r "LIBRARY_AUTHOR\|LIBRARY_COMPANY\|LIBRARY_DESCRIPTION\|REPOSITORY_URL\|LIBRARY_TAGS" .; then
            echo "❌ Template placeholders found in generated project"
            exit 1
          fi
          
          # Test actual NuGet package creation
          dotnet pack --configuration Release --no-build --output ./packages
          
          # Verify package was created
          if [ ! -f "./packages/TestPackaging.1.0.0.nupkg" ]; then
            echo "❌ NuGet package was not created"
            exit 1
          fi
          
          echo "✅ NuGet package created successfully"
          cd ../..
          rm -rf nuget-test

      - name: Test project template NuGet packaging
        run: |
          mkdir project-nuget-test
          cd project-nuget-test
          dotnet new zentient -n TestProjectPackaging \
            --LIBRARY_AUTHOR "GitHub Actions" \
            --LIBRARY_COMPANY "Zentient Templates" \
            --PROJECT_DESCRIPTION "Test project for NuGet packaging validation" \
            --REPOSITORY_URL "https://github.com/test/project-repo" \
            --LIBRARY_TAGS "test;project;github-actions"
          cd TestProjectPackaging
          dotnet restore
          dotnet build --configuration Release --no-restore
          
          # Validate no template placeholders remain
          echo "🔍 Checking for template placeholders..."
          if grep -r "LIBRARY_AUTHOR\|LIBRARY_COMPANY\|PROJECT_DESCRIPTION\|REPOSITORY_URL\|LIBRARY_TAGS" . --exclude-dir=.git; then
            echo "❌ Template placeholders found in generated project"
            exit 1
          fi
          
          echo "✅ Project template NuGet metadata validation passed"
          cd ../..
          rm -rf project-nuget-test

  template-validation-summary:
    name: Template Validation Summary
    runs-on: ubuntu-latest
    needs: [validate-library-template, validate-project-template, template-security-scan, template-compatibility, nuget-metadata-validation]
    if: always()
    steps:
      - name: Check validation results
        run: |
          echo "Library template validation: ${{ needs.validate-library-template.result }}"
          echo "Project template validation: ${{ needs.validate-project-template.result }}"
          echo "Security scan: ${{ needs.template-security-scan.result }}"
          echo "Cross-platform compatibility: ${{ needs.template-compatibility.result }}"
          echo "NuGet metadata validation: ${{ needs.nuget-metadata-validation.result }}"
          
          if [[ "${{ needs.validate-library-template.result }}" == "success" && 
                "${{ needs.validate-project-template.result }}" == "success" && 
                "${{ needs.template-security-scan.result }}" == "success" && 
                "${{ needs.template-compatibility.result }}" == "success" &&
                "${{ needs.nuget-metadata-validation.result }}" == "success" ]]; then
            echo "✅ All template validations passed!"
          else
            echo "❌ Some template validations failed"
            exit 1
          fi
