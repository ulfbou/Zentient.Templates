# .github/workflows/ci.yml
name: CI - Template Validation

on:
  push:
    branches: [ 'feature/*', 'develop' ]
  pull_request:
    branches: [ 'main', 'develop' ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  validate-all-templates:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        template-dir:
          - zentient-library-template
          # - zentient-project-template
        dotnet-version:
          # - '6.0.x'
          # - '7.0.x'
          # - '8.0.x'
          - '9.0.x'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/Directory.Packages.props') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Install jq for JSON parsing
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Make validation script executable
        run: chmod +x scripts/validate-template.sh

      - name: Run comprehensive template validation
        run: ./scripts/validate-template.sh --template-dir templates/${{ matrix.template-dir }}
        env:
          ACTIONS_STEP_DEBUG: true
          ACTIONS_RUNNER_DEBUG: true

      - name: Upload validation artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: validation-logs-${{ matrix.template-dir }}-${{ matrix.dotnet-version }}
          path: /tmp/template-validation/

  # # New job to validate documentation
  # validate-documentation:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Setup .NET SDK
  #       uses: actions/setup-dotnet@v4
  #       with:
  #         dotnet-version: '9.0.x'
      
  #     - name: Install DocFX
  #       run: dotnet tool install -g docfx

  #     - name: Build project to generate XML docs
  #       # This is a critical prerequisite for the documentation script
  #       run: dotnet build --configuration Release /p:GenerateDocumentationFile=true
      
  #     - name: Make documentation script executable
  #       run: chmod +x scripts/generate-docs.sh
      
  #     - name: Run comprehensive documentation validation
  #       # Use the 'generate' command to run all validation and generation steps
  #       run: ./scripts/generate-docs.sh generate
      
  #     - name: Upload documentation artifacts
  #       # Upload the generated documentation site and report for review
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: generated-documentation
  #         path: |
  #           _site/
  #           documentation-report.md